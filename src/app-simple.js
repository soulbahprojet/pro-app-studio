import { supabase } from './lib/supabaseClient.js';

/**
 * Version simplifi√©e pour tester sans modification de la structure de table
 */

const productServiceSimple = {
    async getAll() {
        const { data, error } = await supabase
            .from('products')
            .select('*');
        if (error) throw error;
        return data;
    },

    async create(product) {
        // Cr√©er sans les colonnes qui n'existent peut-√™tre pas encore
        const cleanProduct = {
            name: product.name,
            price: product.price,
            description: product.description
        };

        const { data, error } = await supabase
            .from('products')
            .insert([cleanProduct])
            .select();

        if (error) throw error;
        return data[0];
    }
};

async function testSimple() {
    console.log('üöÄ Test simple de 224Solutions...\n');

    try {
        // Test de lecture
        console.log('üìñ Lecture des produits...');
        const products = await productServiceSimple.getAll();
        console.log(`‚úÖ ${products.length} produits trouv√©s`);

        // Test de cr√©ation
        console.log('\nüìù Cr√©ation d\'un produit test...');
        const newProduct = await productServiceSimple.create({
            name: 'Test 224Solutions',
            price: 99.99,
            description: 'Produit test simple'
        });
        console.log('‚úÖ Produit cr√©√©:', newProduct);

        // Relire pour v√©rifier
        const allProducts = await productServiceSimple.getAll();
        console.log(`\nüì¶ Total apr√®s cr√©ation: ${allProducts.length} produits`);

        console.log('\nüéâ Test simple r√©ussi !');

    } catch (error) {
        console.error('‚ùå Erreur:', error.message);
        console.log('\nüí° Solutions possibles:');
        console.log('1. Ex√©cutez supabase-complete-setup.sql dans Supabase SQL Editor');
        console.log('2. Ou d√©sactivez temporairement RLS pour les tests');
    }
}

testSimple();
