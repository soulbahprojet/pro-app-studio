// Firebase Security Rules for Firestore

// Rules for the 'messages' collection
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Messages collection - users can only read/write messages in conversations they participate in
    match /messages/{messageId} {
      allow read, write: if request.auth != null 
        && request.auth.uid in resource.data.conversationParticipants;
      
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.senderId
        && request.auth.uid in request.resource.data.conversationParticipants;
      
      allow update: if request.auth != null 
        && (request.auth.uid == resource.data.senderId 
            || request.auth.uid in resource.data.conversationParticipants)
        && !('senderId' in request.resource.data.diff(resource.data).affectedKeys())
        && !('conversationId' in request.resource.data.diff(resource.data).affectedKeys());
    }
    
    // Conversations collection - users can only access conversations they participate in
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null 
        && request.auth.uid in resource.data.participants;
      
      allow create: if request.auth != null 
        && request.auth.uid in request.resource.data.participants
        && request.resource.data.participants.size() >= 2
        && request.resource.data.participants.size() <= 10;
      
      allow update: if request.auth != null 
        && request.auth.uid in resource.data.participants
        && request.auth.uid in request.resource.data.participants;
    }
    
    // Notifications collection - users can only read their own notifications
    match /notifications/{notificationId} {
      allow read: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      
      allow write: if request.auth != null 
        && request.auth.uid == request.resource.data.userId;
      
      allow create: if request.auth != null;
      
      allow update: if request.auth != null 
        && request.auth.uid == resource.data.userId
        && !('userId' in request.resource.data.diff(resource.data).affectedKeys());
    }
    
    // User profiles collection - users can read all profiles but only write their own
    match /profiles/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // FCM tokens collection - users can only manage their own tokens
    match /fcmTokens/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Orders collection - users can read orders they are involved in
    match /orders/{orderId} {
      allow read: if request.auth != null 
        && (request.auth.uid == resource.data.customerId 
            || request.auth.uid == resource.data.sellerId
            || request.auth.uid == resource.data.courierId);
      
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.customerId;
      
      allow update: if request.auth != null 
        && (request.auth.uid == resource.data.customerId 
            || request.auth.uid == resource.data.sellerId
            || request.auth.uid == resource.data.courierId);
    }
    
    // Admin only collections
    match /adminData/{document=**} {
      allow read, write: if request.auth != null 
        && request.auth.token.admin == true;
    }
    
    // Default fallback - deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}