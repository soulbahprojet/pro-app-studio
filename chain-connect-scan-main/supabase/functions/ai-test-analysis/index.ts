import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.45.0";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { testResults, analysisType, systemLogs } = await req.json();
    
    if (!openAIApiKey) {
      return new Response(JSON.stringify({ error: 'OpenAI API key not configured' }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    let prompt = '';
    let systemMessage = '';

    switch (analysisType) {
      case 'error_detection':
        systemMessage = `Tu es un expert en analyse de logs et d√©tection d'erreurs pour l'application 224SOLUTIONS. 
        Analyse les logs fournis et identifie :
        1. Les erreurs r√©p√©t√©es ou critiques
        2. Les patterns suspects de comportement
        3. Les fonctionnalit√©s qui semblent d√©faillantes
        4. Les probl√®mes de performance
        Fais un r√©sum√© concis et actionnable.`;
        prompt = `Analyse ces logs de tests 224SOLUTIONS :\n\n${JSON.stringify(testResults, null, 2)}\n\nLogs syst√®me :\n${systemLogs || 'Aucun log syst√®me fourni'}`;
        break;

      case 'security_audit':
        systemMessage = `Tu es un expert en cybers√©curit√© sp√©cialis√© dans l'audit d'applications web et mobiles.
        Analyse les r√©sultats de tests de s√©curit√© et identifie :
        1. Les vuln√©rabilit√©s potentielles (XSS, CSRF, injections)
        2. Les probl√®mes d'authentification et d'autorisation
        3. Les failles dans la gestion des tokens
        4. Les risques li√©s aux APIs expos√©es
        Propose des recommandations de s√©curisation.`;
        prompt = `Audit de s√©curit√© pour 224SOLUTIONS :\n\n${JSON.stringify(testResults, null, 2)}`;
        break;

      case 'performance_analysis':
        systemMessage = `Tu es un expert en optimisation de performance d'applications.
        Analyse les m√©triques de performance et identifie :
        1. Les goulots d'√©tranglement
        2. Les requ√™tes lentes ou redondantes
        3. Les probl√®mes de chargement
        4. Les optimisations possibles
        Propose des solutions concr√®tes.`;
        prompt = `Analyse de performance 224SOLUTIONS :\n\n${JSON.stringify(testResults, null, 2)}`;
        break;

      case 'final_report':
        systemMessage = `Tu es un chef de projet technique exp√©riment√© qui g√©n√®re des rapports de validation d'application.
        Cr√©er un rapport final complet incluant :
        1. √âtat g√©n√©ral de l'application (pr√™te pour production ?)
        2. Liste des bugs critiques √† corriger
        3. Fonctionnalit√©s valid√©es et op√©rationnelles
        4. Recommandations de s√©curit√©
        5. Plan d'action avant mise en production
        Format le rapport de mani√®re professionnelle et structur√©e.`;
        prompt = `G√©n√®re un rapport final pour la validation de 224SOLUTIONS avant mise en production :\n\nR√©sultats des tests :\n${JSON.stringify(testResults, null, 2)}\n\nLogs syst√®me :\n${systemLogs || 'Aucun log syst√®me fourni'}`;
        break;

      case 'bug_classification':
        systemMessage = `Tu es un QA engineer expert qui classe et priorise les bugs.
        Analyse les erreurs d√©tect√©es et classe-les par :
        1. Priorit√© (Critique, Haute, Moyenne, Basse)
        2. Impact utilisateur
        3. Complexit√© de r√©solution estim√©e
        4. Suggestions de fix
        Propose un plan de correction prioris√©.`;
        prompt = `Classification des bugs 224SOLUTIONS :\n\n${JSON.stringify(testResults, null, 2)}`;
        break;

      default:
        systemMessage = `Tu es un assistant technique expert pour l'application 224SOLUTIONS.
        Analyse les donn√©es fournies et donne des insights pertinents.`;
        prompt = `Analyse g√©n√©rale :\n\n${JSON.stringify(testResults, null, 2)}`;
    }

    console.log(`ü§ñ AI Analysis Request - Type: ${analysisType}`);
    console.log(`üìä Test Results Count: ${Array.isArray(testResults) ? testResults.length : 'Not an array'}`);

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4.1-2025-04-14',
        messages: [
          { role: 'system', content: systemMessage },
          { role: 'user', content: prompt }
        ],
        max_tokens: 2000,
        temperature: 0.3,
      }),
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('OpenAI API Error:', errorData);
      throw new Error(`OpenAI API error: ${response.status} - ${errorData}`);
    }

    const data = await response.json();
    const analysis = data.choices[0].message.content;

    console.log(`‚úÖ AI Analysis completed successfully`);

    // Optionnel : sauvegarder l'analyse en base
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    try {
      await supabase.from('ai_analysis_logs').insert({
        analysis_type: analysisType,
        input_data: testResults,
        ai_response: analysis,
        system_logs: systemLogs,
        created_at: new Date().toISOString()
      });
    } catch (dbError) {
      console.warn('Could not save analysis to database:', dbError);
      // Continue m√™me si la sauvegarde √©choue
    }

    return new Response(JSON.stringify({ 
      analysis,
      analysisType,
      timestamp: new Date().toISOString(),
      model: 'gpt-4.1-2025-04-14'
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in ai-test-analysis function:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      stack: error.stack 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});